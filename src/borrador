#include "net.h"
#include "parser_config.h"
#include "parser_objetos.h"
#include "mypthreads.h"
#include "objeto.h"

#include <stdio.h>
#include <string.h>
#include <unistd.h>

#define PORT 5000
#define MAX_MONITORS 10
#define MAX_OBJETOS 32
#define CANVAS_WIDTH 200
#define CANVAS_HEIGHT 100

// üîß Variables globales
char canvas[CANVAS_HEIGHT][CANVAS_WIDTH];
my_mutex_t canvas_mutex;

int clients[MAX_MONITORS];
int num_monitors = 0;
int canvas_width = 0;
int canvas_height = 0;

// üü¢ Enviar canvas dividido a los monitores
void enviar_canvas_a_clientes(char canvas[][CANVAS_WIDTH]) {
    // üîç Mostrar configuraci√≥n antes de dividir
    printf("üì§ Enviando canvas de tama√±o %dx%d dividido entre %d monitores\n",
           canvas_width, canvas_height, num_monitors);

    int section_width = canvas_width / num_monitors;

    for (int i = 0; i < num_monitors; i++) {
        NetPacket pkt;
        pkt.x = i * section_width;
        pkt.y = 0;
        pkt.width = section_width;
        pkt.height = canvas_height;

        // üîç Mostrar informaci√≥n de la secci√≥n enviada
        printf("‚û°Ô∏è  Secci√≥n para cliente %d ‚Üí x=%d, ancho=%d, alto=%d\n",
               i, pkt.x, pkt.width, pkt.height);

        // Copiar contenido de canvas al paquete
        for (int row = 0; row < pkt.height; row++) {
            for (int col = 0; col < pkt.width; col++) {
                pkt.data[row][col] = canvas[row][col + pkt.x];
            }
        }

        send_packet(clients[i], &pkt);
    }
}

// üßµ Hilo para animar un objeto
void* animar_objeto(void* arg) {
    ObjetoAnimado* obj = (ObjetoAnimado*) arg;
    int pasos = abs(obj->x_end - obj->x_start);
    int dx = (obj->x_end > obj->x_start) ? 1 : -1;
    obj->current_x = obj->x_start;
    obj->current_y = obj->y_start;

    

    printf("üßµ Iniciando hilo para objeto en y=%d\n", obj->current_y);

    for (int p = 0; p <= pasos; p++) {
        printf("‚û°Ô∏è Hilo tid=%d paso %d/%d\n", current->tid, p, pasos);

        my_mutex_lock(&canvas_mutex);
        printf("‚úÖ canvas_mutex inicializado: %p\n", (void*)&canvas_mutex);

        // Borrar figura anterior
        for (int i = 0; i < obj->shape_height; i++) {
            for (int j = 0; j < obj->shape_width; j++) {
                int y = obj->current_y + i;
                int x = obj->current_x + j;
                if (obj->shape[i][j] != ' ' &&
                    x >= 0 && x < canvas_width &&
                    y >= 0 && y < canvas_height)
                    canvas[y][x] = '.';
            }
        }

        // Avanzar una posici√≥n
        obj->current_x += dx;

        // Dibujar nueva posici√≥n
        for (int i = 0; i < obj->shape_height; i++) {
            for (int j = 0; j < obj->shape_width; j++) {
                int y = obj->current_y + i;
                int x = obj->current_x + j;
                if (obj->shape[i][j] != ' ' &&
                    x >= 0 && x < canvas_width &&
                    y >= 0 && y < canvas_height)
                    canvas[y][x] = obj->shape[i][j];
            }
        }

        my_mutex_unlock(&canvas_mutex);
        enviar_canvas_a_clientes(canvas);
        usleep(150000);
        my_thread_yield();
    }

    printf("üèÅ Hilo tid=%d termin√≥\n", current->tid);

    // üßπ Liberar figura
    for (int i = 0; i < obj->shape_height; i++) {
        free(obj->shape[i]);
    }
    free(obj->shape);
    free(obj);

    my_thread_end(NULL);
    return NULL;
}


int main() {
    // Leer configuraci√≥n
    CanvasConfig config;
    if (read_config("config/animation.ini", &config) != 0) {
        printf("‚ùå No se pudo leer config/animation.ini\n");
        return 1;
    }

    ObjetoAnimado objetos[MAX_OBJETOS];
    int total_objetos = 0;
    if (cargar_objetos_desde_ini("config/animation.ini", objetos, &total_objetos) < 0) {
        printf("‚ùå Error cargando objetos desde el .ini\n");
        return 1;
    }

    printf("üì¶ Objetos cargados (%d):\n", total_objetos);
    for (int i = 0; i < total_objetos; i++) {
        ObjetoAnimado* o = &objetos[i];
        printf("üî∏ Obj %d: (%d,%d) ‚Üí (%d,%d) | Sched=%d | Tck=%d | ‚è±Ô∏è %ld‚Üí%ld | D=%ld\n",
            i, o->x_start, o->y_start, o->x_end, o->y_end,
            o->scheduler, o->tickets, o->time_start, o->time_end, o->deadline);
    }


    canvas_width = config.width;
    canvas_height = config.height;
    num_monitors = config.num_monitors;

    // Inicializar canvas
    for (int i = 0; i < canvas_height; i++)
        memset(canvas[i], '.', canvas_width);

    // Inicializar mutex
    my_mutex_init(&canvas_mutex);
    printf("‚úÖ canvas_mutex inicializado en: %p\n", (void*)&canvas_mutex);


    // Iniciar sockets
    int server_fd = create_server_socket(PORT);

    printf("üñºÔ∏è Canvas: %dx%d | Monitores: %d | Objetos: %d\n", canvas_width, canvas_height, num_monitors, total_objetos);
    printf("üîå Esperando %d monitores...\n", num_monitors);
    for (int i = 0; i < num_monitors; i++) {
        clients[i] = accept_client(server_fd);
        printf("‚úÖ Monitor %d conectado.\n", i);
    }

    // Iniciar scheduler ANTES de agregar hilos
    scheduler_init();

    // Crear hilos para cada objeto
    for (int i = 0; i < total_objetos; i++) {
        printf("üîÑ Creando hilo para objeto %d...\n", i);
    
        // ‚ö†Ô∏è Paso 1: Reservar y limpiar memoria
        ObjetoAnimado* copia = malloc(sizeof(ObjetoAnimado));
        if (!copia) {
            printf("‚ùå Error al reservar memoria para objeto %d\n", i);
            continue;
        }
        memset(copia, 0, sizeof(ObjetoAnimado)); // limpia todos los campos
    
        // ‚ö†Ô∏è Paso 2: Copiar valores escalares
        *copia = objetos[i]; // copia los enteros, punteros, etc.
    
        // ‚ö†Ô∏è Paso 3: Copia profunda de la figura ASCII
        copia->shape = malloc(sizeof(char*) * copia->shape_height);
        if (!copia->shape) {
            printf("‚ùå Error al reservar memoria para shape del objeto %d\n", i);
            free(copia);
            continue;
        }
    
        for (int r = 0; r < copia->shape_height; r++) {
            copia->shape[r] = strdup(objetos[i].shape[r]);
            if (!copia->shape[r]) {
                printf("‚ùå Error duplicando l√≠nea %d del shape\n", r);
                // libera todo lo anterior
                for (int k = 0; k < r; k++) free(copia->shape[k]);
                free(copia->shape);
                free(copia);
                continue;
            }
        }
    
        // ‚ö†Ô∏è Validaci√≥n antes de crear el hilo
        printf("üì¶ Objeto %d copiado: y_start=%d x_start=%d shape[0]='%s'\n", 
            i, copia->y_start, copia->x_start, copia->shape[0]);
    
        my_thread_t t;
        int res = my_thread_create(&t, animar_objeto, copia);
        if (res != 0) {
            printf("‚ùå Error creando hilo para objeto %d\n", i);
            for (int r = 0; r < copia->shape_height; r++) free(copia->shape[r]);
            free(copia->shape);
            free(copia);
            continue;
        }
    
        printf("‚úÖ Hilo creado para objeto %d (tid = %d)\n", i, t);
    
        int sched = my_thread_chsched(t,
            copia->scheduler,
            copia->tickets,
            copia->time_start,
            copia->time_end,
            copia->deadline
        );
    
        if (sched != 0) {
            printf("‚ö†Ô∏è  Error asignando scheduler a objeto %d\n", i);
        }
    }    

    // Ejecutar scheduler
    scheduler_run();


    while (1) {
        usleep(100000); // espera 100ms
    }
    

    close(server_fd);
    return 0;
}
